"use strict";(self.webpackChunk_ethereal_engine_docs=self.webpackChunk_ethereal_engine_docs||[]).push([[74336],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=r,f=c["".concat(s,".").concat(u)]||c[u]||p[u]||i;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},60664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={id:"renderer_materials_constants_VoronoiClouds_mat",title:"Module: renderer/materials/constants/VoronoiClouds.mat",sidebar_label:"renderer/materials/constants/VoronoiClouds.mat",custom_edit_url:null},o=void 0,l={unversionedId:"API/engine/modules/renderer_materials_constants_VoronoiClouds_mat",id:"API/engine/modules/renderer_materials_constants_VoronoiClouds_mat",title:"Module: renderer/materials/constants/VoronoiClouds.mat",description:"Variables",source:"@site/docs/API/engine/modules/renderer_materials_constants_VoronoiClouds_mat.md",sourceDirName:"API/engine/modules",slug:"/API/engine/modules/renderer_materials_constants_VoronoiClouds_mat",permalink:"/ethereal-engine-docs/docs/API/engine/modules/renderer_materials_constants_VoronoiClouds_mat",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"renderer_materials_constants_VoronoiClouds_mat",title:"Module: renderer/materials/constants/VoronoiClouds.mat",sidebar_label:"renderer/materials/constants/VoronoiClouds.mat",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"renderer/materials/constants/Toon.mat",permalink:"/ethereal-engine-docs/docs/API/engine/modules/renderer_materials_constants_Toon_mat"},next:{title:"CSMModes",permalink:"/ethereal-engine-docs/docs/API/engine/enums/assets_csm_CSM.CSMModes"}},s={},d=[{value:"Variables",id:"variables",level:2},{value:"DefaultArgs",id:"defaultargs",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"fragmentShader",id:"fragmentshader",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"vertexShader",id:"vertexshader",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"Functions",id:"functions",level:2},{value:"default",id:"default",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-3",level:4}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"defaultargs"},"DefaultArgs"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"DefaultArgs"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iResolution")),(0,r.kt)("td",{parentName:"tr",align:"left"},"{ ",(0,r.kt)("inlineCode",{parentName:"td"},"default"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),"[] ; ",(0,r.kt)("inlineCode",{parentName:"td"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," = 'vec3' }")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iResolution.default")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iResolution.type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iTime")),(0,r.kt)("td",{parentName:"tr",align:"left"},"{ ",(0,r.kt)("inlineCode",{parentName:"td"},"default"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number")," = 0; ",(0,r.kt)("inlineCode",{parentName:"td"},"hide"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," = true }")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iTime.default")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"iTime.hide")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/aabb9a2/packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts#L169"},"packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts:169")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"fragmentshader"},"fragmentShader"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"fragmentShader"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"\\nuniform vec3 iResolution;\\nuniform float iTime;\\nvarying vec2 vUv;\\n/* \\n    Combustible Voronoi Layers\\n\\t--------------------------\\n\\n    The effect itself is nothing new or exciting, just some moving 3D Voronoi layering. \\n    However, the fire palette might prove useful to some.\\n\\n*/\\n\\n\\n// This is my favorite fire palette. It\'s trimmed down for shader usage, and is based on an \\n// article I read at Hugo Elias\'s site years ago. I\'m sure most old people, like me, have \\n// visited his site at one time or another:\\n//\\n// http://freespace.virgin.net/hugo.elias/models/m_ffire.htm\\n//\\nvec3 firePalette(float i){\\n\\n    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\\n    vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\\n    L = pow(L,vec3(5)) * (exp(1.43876719683e5/(T*L)) - 1.);\\n    return 1. - exp(-5e8/L); // Exposure level. Set to \\"50.\\" For \\"70,\\" change the \\"5\\" to a \\"7,\\" etc.\\n}\\n\\n/*\\nvec3 firePalette(float i){\\n\\n    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\\n    // Hardcode red, green and blue wavelengths (in hundreds of nanometers).\\n    vec3 L = (exp(vec3(19442.7999572, 25692.271372, 32699.2544734)/T) - 1.);\\n    // Exposure level. Set to \\"50\\" For \\"70,\\" change the \\".5\\" to a \\".7,\\" etc.\\n    return 1. - exp(-vec3(22532.6051122, 90788.296915, 303184.239775)*2.*.5/L); \\n}\\n*/\\n\\nvec3 hash33(vec3 p){ \\n    \\n    float n = sin(dot(p, vec3(7, 157, 113)));    \\n    return fract(vec3(2097152, 262144, 32768)*n); \\n}\\n\\n// 3D Voronoi: Obviously, this is just a rehash of IQ\'s original.\\n//\\nfloat voronoi(vec3 p){\\n\\n\\tvec3 b, r, g = floor(p);\\n\\tp = fract(p); // \\"p -= g;\\" works on some GPUs, but not all, for some annoying reason.\\n\\t\\n\\t// Maximum value: I think outliers could get as high as \\"3,\\" the squared diagonal length \\n\\t// of the unit cube, with the mid point being \\"0.75.\\" Is that right? Either way, for this \\n\\t// example, the maximum is set to one, which would cover a good part of the range, whilst \\n\\t// dispensing with the need to clamp the final result.\\n\\tfloat d = 1.; \\n     \\n    // I\'ve unrolled one of the loops. GPU architecture is a mystery to me, but I\'m aware \\n    // they\'re not fond of nesting, branching, etc. My laptop GPU seems to hate everything, \\n    // including multiple loops. If it were a person, we wouldn\'t hang out. \\n\\tfor(int j = -1; j <= 1; j++) {\\n\\t    for(int i = -1; i <= 1; i++) {\\n    \\t\\t\\n\\t\\t    b = vec3(i, j, -1);\\n\\t\\t    r = b - p + hash33(g+b);\\n\\t\\t    d = min(d, dot(r,r));\\n    \\t\\t\\n\\t\\t    b.z = 0.0;\\n\\t\\t    r = b - p + hash33(g+b);\\n\\t\\t    d = min(d, dot(r,r));\\n    \\t\\t\\n\\t\\t    b.z = 1.;\\n\\t\\t    r = b - p + hash33(g+b);\\n\\t\\t    d = min(d, dot(r,r));\\n    \\t\\t\\t\\n\\t    }\\n\\t}\\n\\t\\n\\treturn d; // Range: [0, 1]\\n}\\n\\n// Standard fBm function with some time dialation to give a parallax \\n// kind of effect. In other words, the position and time frequencies \\n// are changed at different rates from layer to layer.\\n//\\nfloat noiseLayers(in vec3 p) {\\n\\n    // Normally, you\'d just add a time vector to \\"p,\\" and be done with \\n    // it. However, in this instance, time is added seperately so that \\n    // its frequency can be changed at a different rate. \\"p.z\\" is thrown \\n    // in there just to distort things a little more.\\n    vec3 t = vec3(0., 0., p.z + iTime*1.5);\\n\\n    const int iter = 5; // Just five layers is enough.\\n    float tot = 0., sum = 0., amp = 1.; // Total, sum, amplitude.\\n\\n    for (int i = 0; i < iter; i++) {\\n        tot += voronoi(p + t) * amp; // Add the layer to the total.\\n        p *= 2.; // Position multiplied by two.\\n        t *= 1.5; // Time multiplied by less than two.\\n        sum += amp; // Sum of amplitudes.\\n        amp *= .5; // Decrease successive layer amplitude, as normal.\\n    }\\n    \\n    return tot/sum; // Range: [0, 1].\\n}\\n\\nvoid main()\\n{\\n    vec2 fragCoord = vUv;\\n    // Screen coordinates.\\n\\tvec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\\n\\t\\n\\t// Shifting the central position around, just a little, to simulate a \\n\\t// moving camera, albeit a pretty lame one.\\n\\tuv += vec2(sin(iTime*.5)*.25, cos(iTime*.5)*.125);\\n\\t\\n    // Constructing the unit ray. \\n\\tvec3 rd = normalize(vec3(uv.x, uv.y, 3.1415926535898/8.));\\n\\n    // Rotating the ray about the XY plane, to simulate a rolling camera.\\n\\tfloat cs = cos(iTime*.25), si = sin(iTime*.25);\\n    // Apparently \\"r *= rM\\" can break in some older browsers.\\n\\trd.xy = rd.xy*mat2(cs, -si, si, cs); \\n\\t\\n\\t// Passing a unit ray multiple into the Voronoi layer function, which \\n\\t// is nothing more than an fBm setup with some time dialation.\\n\\tfloat c = noiseLayers(rd*2.);\\n\\t\\n\\t// Optional: Adding a bit of random noise for a subtle dust effect. \\n\\tc = max(c + dot(hash33(rd)*2. - 1., vec3(.015)), 0.);\\n\\n    // Coloring:\\n    \\n    // Nebula.\\n    c *= sqrt(c)*1.5; // Contrast.\\n    vec3 col = firePalette(c); // Palettization.\\n    //col = mix(col, col.zyx*.1+ c*.9, clamp((1.+rd.x+rd.y)*0.45, 0., 1.)); // Color dispersion.\\n    col = mix(col, col.zyx*.15 + c*.85, min(pow(dot(rd.xy, rd.xy)*1.2, 1.5), 1.)); // Color dispersion.\\n    col = pow(col, vec3(1.25)); // Tweaking the contrast a little.\\n    \\n    // The fire palette on its own. Perhaps a little too much fire color.\\n    //c = pow(c*1.33, 1.25);\\n    //vec3 col =  firePalette(c);\\n   \\n    // Black and white, just to keep the art students happy. :)\\n\\t//c *= c*1.5;\\n\\t//vec3 col = vec3(c);\\n\\t\\n\\t// Rough gamma correction, and done.\\n\\tgl_FragColor = vec4(sqrt(clamp(col, 0., 1.)), 1);\\n}"')),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/aabb9a2/packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts#L15"},"packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts:15")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"vertexshader"},"vertexShader"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"vertexShader"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"\\nvarying vec2 vUv;\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\\n}\\n"')),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/aabb9a2/packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts#L7"},"packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts:7")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"default"},"default"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"default"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"args?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/ethereal-engine-docs/docs/API/engine/modules/renderer_materials_MaterialParms#materialparms"},(0,r.kt)("inlineCode",{parentName:"a"},"MaterialParms"))),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"args?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"args.iResolution?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"args.iTime?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/ethereal-engine-docs/docs/API/engine/modules/renderer_materials_MaterialParms#materialparms"},(0,r.kt)("inlineCode",{parentName:"a"},"MaterialParms"))),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/XRFoundation/XREngine/blob/aabb9a2/packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts#L174"},"packages/engine/src/renderer/materials/constants/VoronoiClouds.mat.ts:174")))}p.isMDXComponent=!0}}]);